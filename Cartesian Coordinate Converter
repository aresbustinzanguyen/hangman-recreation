//**************************************************************
//*** Title: Polar <==> Rectangular conversion
//*** Course: CPET 121
//*** Developer: Athena Bustinza-Nguyen
//*** Date: 10/4/2022
//*** Description: Converting a given point in the cartesian coordinate system to either polar to rectangular 
//*** or rectangular to polar
//***
//**************************************************************

#include <iostream>
#include <iomanip>
#include <cmath> 

using namespace std;
const float pi = 3.14159;

//function prototypes
void userInput(char& c, double& p1, double& p2);

void userOutput(char c, double x, double y, double M, double A);

void RecToPol(double x, double y, double& M, double& A);

void PolToRec(double M, double A, double& x, double& y);

//**************************************************************
int main()
{
    char c = ' ';
    double p1, p2;
    double x, y, M, A;
    cout << "To start the program, enter letter (p) or (r) for polar-->rectangular or rectangular-->polar conversion. Enter two numbers after for the conversion to start. [Enter (q) to exit.]" << endl;

// check user input for exit condition
    while (c != 'q' && c != 'Q') {
        userInput(c, p1, p2);

        cout << fixed << setprecision(2);

        switch (c) {
            case 'R':
            case 'r':
            // reassigning inputs to appropriate values for functions called
                x = p1;
                y = p2;
                // call function for rectangular to polar
                RecToPol(x, y, M, A);
                // display results
                userOutput(c, x, y, M, A);
                break;

            case 'P':
            case 'p':
            // reassigning inputs to appropriate values for functions called
                M = p1;
                A = p2;
                // call function for polar to rectangular
                PolToRec(M, A, x, y);
                //display results
                userOutput(c, x, y, M, A);
                break;
            // check for exit condition within loop
            case 'Q':
            case 'q':
                break;

            // case for inccorect input
            default:
                cout << "Format Error! " << setfill('-') << setw(46) << '-' << endl;
        }
    }
    return(0);
}
//**************************************************************

//**************************************************************
//*** Function: userInput
//*** Inputs:
//***   c (char) - character for input coordinate type
//***   p1 (double) - first coordinate value for conversion
//***   p2 (double) - second coordinate value for conversion
//*** Output:
//***   none
//*** Function takes in user inputs and checks for exit condition 
//*** if condition not met, coordinate inputs are taken
//**************************************************************
void userInput(char& c, double& p1, double& p2) {
    cin >> c;
    if (c == 'Q' || c == 'q') {
        return;
    }
    else {
        cin >> p1 >> p2;
    }
}

//**************************************************************
//*** Function: userOutput
//*** Inputs:
//***   c (char) - character for input coordinate type
//***   x (double) - first coordinate value for conversion
//***   y (double) - second coordinate value for conversion
//***   M (double) - magnitude of vector from origin to point
//***   A (double) - angle of vector from origin to point
//*** 
//*** Output:
//***   none
//***
//*** Function uses inputs prints and formats output
//**************************************************************
void userOutput(char c, double x, double y, double M, double A) {
    if (c == 'r' || c == 'R') {
        cout << "REC -> POL " << fixed << setfill('+') << setw(49) << '+' << endl;
        cout << "REC: X = " << setw(4) << x << " Y = " << y << setw(4) << " POL: M = " << setw(4) << M << " A = " << setw(4) << A << endl;
    }
    else if (c == 'p' || c == 'P') {
        cout << "POL -> REC " << fixed << setfill('+') << setw(49) << '+' << endl;
        cout << "POL: M = " << setw(4) << M << " A = " << A << setw(4) << " REC: X = " << x << setw(4) << " Y = " << y << setw(4) << endl;
    }
}

//**************************************************************
//*** Function: RecToPol
//*** Inputs:
//***   x (double) - first coordinate value for conversion
//***   y (double) - second coordinate value for conversion
//***   M (double) - magnitude of vector from origin to point
//***   A (double) - angle of vector from origin to point
//*** 
//*** Output:
//***   none
//***
//*** Function converts polar coordinate inputs to rectangular 
//*** coordinate values
//**************************************************************
void RecToPol(double x, double y, double& M, double& A) {
    M = sqrt(pow(x, 2.0) + pow(y, 2.0));
    A = atan2(y, x) * (180.0 / pi);
}

//**************************************************************
//*** Function: PolToRec
//*** Inputs:
//***   x (double) - first coordinate value for conversion
//***   y (double) - second coordinate value for conversion
//***   M (double) - magnitude of vector from origin to point
//***   A (double) - angle of vector from origin to point
//*** 
//*** Output:
//***   none
//***
//*** Function converts rectangular coordinate inputs to polar 
//*** coordinate values
//**************************************************************
void PolToRec(double M, double A, double& x, double& y) {
    x = M * cos(A * (pi / 180.0));
    y = M * sin(A * (pi / 180.0));
}
